<style>
    .chapter-card {
        position: relative;
        border-radius: 0.375rem;
        overflow: hidden;
        transition: transform 0.2s ease-out;
    }
    .chapter-card:hover {
        transform: translateY(-4px);
    }
    .chapter-card .thumbnail {
        aspect-ratio: 16 / 10;
        object-fit: cover;
        width: 100%;
    }
    .chapter-card .overlay {
        position: absolute;
        inset: 0;
        background: linear-gradient(to top, rgba(0, 0, 0, 0.85), transparent 60%);
    }
    .text-backdrop {
        display: inline-block;
        background-color: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(3px);
        -webkit-backdrop-filter: blur(3px);
        padding: 2px 8px;
        border-radius: 0.25rem;
        color: white;
    }
    .chapter-card .card-content {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 0.75rem;
        color: white;
    }
    .chapter-card .status-btn {
        width: 100%;
        margin-top: 0.5rem;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
        font-weight: 600;
        text-align: center;
        transition: background-color 0.2s;
    }
    .chapter-card .status-free {
        background-color: #3b82f6;
        color: white;
    }
    .chapter-card .status-free:hover {
        background-color: #2563eb;
    }
    .chapter-card .status-locked {
        background-color: #4b5563;
        color: #d1d5db;
    }
    .chapter-card .status-purchased {
        background-color: #ca8a04;
        color: white;
    }
     .chapter-card .status-purchased:hover {
        background-color: #a16207;
    }
</style>

<div class="flex justify-between items-center mb-4">
    <h2 class="text-xl font-semibold text-sky-300">لیست قسمت‌ها (<span id="total-chapters-count">0</span>)</h2>
    <button id="sort-chapters-btn" class="flex items-center gap-2 text-sm text-zinc-300 hover:text-white p-2 rounded-md transition-colors">
        <span id="sort-order-text">جدیدترین</span>
        <svg id="sort-icon" class="w-5 h-5 transition-transform" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 3a.75.75 0 01.75.75v10.638l3.47-3.47a.75.75 0 111.06 1.06l-4.75 4.75a.75.75 0 01-1.06 0l-4.75-4.75a.75.75 0 111.06-1.06l3.47 3.47V3.75A.75.75 0 0110 3z" clip-rule="evenodd" /></svg>
    </button>
</div>

<div id="chapter-list-container" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
</div>

<div id="load-more-container" class="mt-8 text-center">
    <button id="load-more-btn" class="bg-zinc-700 hover:bg-zinc-600 text-zinc-200 font-semibold py-2 px-8 rounded-md transition-colors">
        بارگذاری بیشتر
    </button>
</div>

<script>
    if (!window.chaptersScriptLoaded) {
        window.chaptersScriptLoaded = true;

        document.addEventListener('DOMContentLoaded', () => {
            const initialChapters = <%- JSON.stringify(chapters || []) %>;
            const totalChapters = <%- total_chapters_count || 0 %>;
            const mangaIdForChapters = <%- (typeof manga !== 'undefined' && manga) ? manga.id : 'null' %>;

            const chapterListContainer = document.getElementById('chapter-list-container');
            const loadMoreContainer = document.getElementById('load-more-container');
            const loadMoreBtn = document.getElementById('load-more-btn');
            const sortButton = document.getElementById('sort-chapters-btn');
            const sortIcon = document.getElementById('sort-icon');
            const sortOrderText = document.getElementById('sort-order-text');
            const totalChaptersCountEl = document.getElementById('total-chapters-count');
            
            let currentPage = 1;
            let isFetching = false;
            let sortOrder = 'desc';

            const createChapterCard = (chapter) => {
                const cardElement = document.createElement('div');
                cardElement.className = 'chapter-card group';

                let statusText, statusClass, linkHref;

                if (chapter.is_locked) {
                    statusText = 'لاگین کنید';
                    statusClass = 'status-locked';
                    linkHref = '/auth?redirect=' + encodeURIComponent(window.location.pathname);
                } else {
                    statusText = chapter.is_read ? 'خواندن مجدد' : 'خواندن';
                    statusClass = chapter.is_read ? 'status-purchased' : 'status-free';
                    linkHref = `https://read.targo.fun/chapter/${chapter.id}?manga_id=${mangaIdForChapters}`;
                }

                cardElement.innerHTML = `
                    <a href="${linkHref}" class="block">
                        <img src="${chapter.thumbnail_url || 'https://placehold.co/300x180/27272a/9ca3af?text=Image'}" alt="تصویر قسمت ${chapter.chapter_number}" class="thumbnail bg-zinc-800">
                        <div class="overlay"></div>
                        <div class="card-content">
                            <div>
                                <h3 class="font-bold truncate text-backdrop">${'قسمت ' + chapter.chapter_number}</h3>
                                <p class="text-xs mt-1 text-backdrop">${new Date(chapter.upload_date).toLocaleDateString('fa-IR')}</p>
                            </div>

                            <div class="status-btn ${statusClass} mt-3"> ${chapter.is_locked ? '<svg class="inline w-4 h-4 ml-1" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002 2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z" clip-rule="evenodd" /></svg>' : ''}
                                ${statusText}
                            </div>
                        </div>
                    </a>
                `;
                return cardElement;
            };

            const renderChapters = (chapters) => {
                if(chapters.length === 0 && currentPage === 1) {
                    chapterListContainer.innerHTML = `<p class="text-zinc-400 text-center py-4 col-span-full">هنوز قسمتی برای این مجموعه اضافه نشده است.</p>`;
                    loadMoreContainer.style.display = 'none';
                    return;
                }

                chapters.forEach(chapter => {
                    const card = createChapterCard(chapter);
                    chapterListContainer.appendChild(card);
                });

                const currentlyDisplayed = chapterListContainer.children.length;
                if (currentlyDisplayed >= totalChapters) {
                    loadMoreContainer.style.display = 'none';
                } else {
                    loadMoreContainer.style.display = 'block';
                }
            };
            
            const loadMoreChapters = async () => {
                if (isFetching) return;
                isFetching = true;
                currentPage++;
                loadMoreBtn.textContent = 'در حال بارگذاری...';
                loadMoreBtn.disabled = true;

                try {
                    const response = await fetch(`/api/manga/${mangaIdForChapters}/chapters?page=${currentPage}&sort=${sortOrder}`);
                    const newChapters = await response.json();
                    
                    if (newChapters.length > 0) {
                        renderChapters(newChapters);
                    } else {
                        loadMoreContainer.style.display = 'none';
                    }
                } catch (error) {
                    console.error('Failed to load more chapters:', error);
                    loadMoreBtn.textContent = 'خطا! تلاش مجدد';
                } finally {
                    isFetching = false;
                    loadMoreBtn.disabled = false;
                    if(loadMoreBtn.textContent === 'در حال بارگذاری...') {
                       loadMoreBtn.textContent = 'بارگذاری بیشتر';
                    }
                }
            };
            
            const resetAndFetchChapters = async () => {
                currentPage = 1;
                isFetching = true;
                chapterListContainer.innerHTML = `<p class="text-zinc-400 text-center py-4 col-span-full">در حال بارگذاری لیست قسمت‌ها...</p>`;
                loadMoreContainer.style.display = 'none';
                
                try {
                    const response = await fetch(`/api/manga/${mangaIdForChapters}/chapters?page=${currentPage}&sort=${sortOrder}`);
                    const chapters = await response.json();
                    chapterListContainer.innerHTML = '';
                    renderChapters(chapters);
                } catch (error) {
                    console.error('Failed to fetch chapters:', error);
                    chapterListContainer.innerHTML = `<p class="text-red-400 text-center py-4 col-span-full">خطا در بارگذاری قسمت‌ها.</p>`;
                } finally {
                    isFetching = false;
                }
            };

            loadMoreBtn.addEventListener('click', loadMoreChapters);

            sortButton.addEventListener('click', () => {
                if (isFetching) return;
                sortOrder = sortOrder === 'desc' ? 'asc' : 'desc';
                sortOrderText.textContent = sortOrder === 'desc' ? 'جدیدترین' : 'قدیمی‌ترین';
                sortIcon.style.transform = sortOrder === 'desc' ? 'rotate(0deg)' : 'rotate(180deg)';
                resetAndFetchChapters();
            });

            if (totalChaptersCountEl) {
                totalChaptersCountEl.textContent = totalChapters;
            }
            renderChapters(initialChapters);
        });
    }
</script>