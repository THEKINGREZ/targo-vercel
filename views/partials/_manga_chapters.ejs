<style>
    .chapter-card {
        position: relative;
        border-radius: 0.375rem;
        overflow: hidden;
        transition: transform 0.2s ease-out;
    }
    .chapter-card:hover {
        transform: translateY(-4px);
    }
    .chapter-card .thumbnail {
        aspect-ratio: 16 / 10;
        object-fit: cover;
        width: 100%;
    }
    .chapter-card .overlay {
        position: absolute;
        inset: 0;
        background: linear-gradient(to top, rgba(0, 0, 0, 0.85), transparent 60%);
    }
    .text-backdrop {
        display: inline-block;
        background-color: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(3px);
        -webkit-backdrop-filter: blur(3px);
        padding: 2px 8px;
        border-radius: 0.25rem;
        color: white;
    }
    .chapter-card .card-content {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 0.75rem;
        color: white;
    }
    .chapter-card .status-btn {
        width: 100%;
        margin-top: 0.5rem;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.875rem;
        font-weight: 600;
        text-align: center;
        transition: background-color 0.2s;
    }
    .chapter-card .status-free {
        background-color: #3b82f6;
        color: white;
    }
    .chapter-card .status-free:hover {
        background-color: #2563eb;
    }
    .chapter-card .status-locked {
        background-color: #4b5563;
        color: #d1d5db;
    }
    .chapter-card .status-purchased {
        background-color: #ca8a04;
        color: white;
    }
    .chapter-card .status-purchased:hover {
        background-color: #a16207;
    }
</style>

<div class="space-y-6">
    <!-- هدر و کنترل‌ها -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h2 class="text-2xl font-semibold text-sky-300">
            قسمت‌ها (<span id="chapters-count"><%= total_chapters_count || 0 %></span>)
        </h2>
        <div class="flex items-center gap-3">
            <label for="chapters-sort" class="text-sm text-zinc-400">مرتب‌سازی:</label>
            <select id="chapters-sort" class="bg-zinc-700 text-zinc-200 text-sm rounded-md border-zinc-600 focus:ring-sky-500 focus:border-sky-500">
                <option value="desc">جدیدترین ابتدا</option>
                <option value="asc">قدیمی‌ترین ابتدا</option>
            </select>
        </div>
    </div>

    <!-- لیست قسمت‌ها -->
    <div id="chapters-container" class="space-y-2"></div>

    <!-- بارگذاری بیشتر -->
    <div id="load-more-container" class="text-center hidden">
        <button id="load-more-btn" class="bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-6 rounded-lg transition-colors">
            بارگذاری بیشتر
        </button>
    </div>

    <!-- لودینگ -->
    <div id="chapters-loading" class="text-center py-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-sky-400 mx-auto"></div>
        <p class="text-zinc-400 mt-2">در حال بارگذاری...</p>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const mangaId = <%= manga.id %>;
    const chaptersContainer = document.getElementById('chapters-container');
    const loadMoreContainer = document.getElementById('load-more-container');
    const loadMoreBtn = document.getElementById('load-more-btn');
    const chaptersLoading = document.getElementById('chapters-loading');
    const sortSelect = document.getElementById('chapters-sort');
    const chaptersCount = document.getElementById('chapters-count');

    let currentPage = 1;
    let isLoading = false;
    let hasMoreChapters = true;

    function createChapterElement(chapter) {
        const div = document.createElement('div');
        div.className = `bg-zinc-900/50 rounded-lg p-4 hover:bg-zinc-800/70 transition-colors ${chapter.is_read ? 'opacity-60' : ''}`;

        const lockIcon = chapter.is_locked ? `
            <svg class="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"/>
            </svg>
        ` : '';

        const readBadge = chapter.is_read ? `
            <span class="bg-green-500/20 text-green-400 px-2 py-1 rounded-full text-xs font-medium">
                خوانده شده
            </span>
        ` : '';

        div.innerHTML = `
            <div class="flex items-center justify-between">
                <div class="flex items-center gap-4 flex-grow min-w-0">
                    <img src="${chapter.thumbnail_url}" alt="تصویر قسمت" class="w-12 h-16 object-cover rounded flex-shrink-0">
                    <div class="min-w-0 flex-grow">
                        <h3 class="font-semibold text-zinc-100 truncate">
                            قسمت ${chapter.chapter_number}${chapter.title ? ': ' + chapter.title : ''}
                        </h3>
                        <p class="text-sm text-zinc-400 mt-1">
                            ${new Date(chapter.upload_date).toLocaleDateString('fa-IR')}
                        </p>
                    </div>
                </div>
                <div class="flex items-center gap-3 flex-shrink-0">
                    ${readBadge}
                    ${lockIcon}
                    ${chapter.is_locked ?
                        '<span class="bg-yellow-500/20 text-yellow-400 px-3 py-1 rounded-lg text-sm font-medium">قفل شده</span>' :
                        '<a href="/chapter/' + chapter.id + '" class="bg-sky-500 hover:bg-sky-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">مطالعه</a>'
                    }
                </div>
            </div>
        `;

        return div;
    }

    async function loadChapters(page = 1, append = false) {
        if (isLoading) return;
        isLoading = true;

        if (!append) {
            chaptersLoading.classList.remove('hidden');
            chaptersContainer.innerHTML = '';
        }

        loadMoreBtn.disabled = true;
        loadMoreBtn.textContent = 'در حال بارگذاری...';

        try {
            const sortOrder = sortSelect.value;
            const response = await fetch(`/api/manga/${mangaId}/chapters?page=${page}&sort=${sortOrder}`);
            const chapters = await response.json();

            if (chapters.length === 0) {
                hasMoreChapters = false;
                loadMoreContainer.classList.add('hidden');
                if (!append && chaptersContainer.children.length === 0) {
                    chaptersContainer.innerHTML = '<div class="text-center py-8 text-zinc-400">هیچ قسمتی یافت نشد.</div>';
                }
            } else {
                chapters.forEach(chapter => {
                    const chapterElement = createChapterElement(chapter);
                    chaptersContainer.appendChild(chapterElement);
                });

                if (chapters.length < 50) {
                    hasMoreChapters = false;
                    loadMoreContainer.classList.add('hidden');
                } else {
                    loadMoreContainer.classList.remove('hidden');
                }
            }
        } catch (error) {
            console.error('Error loading chapters:', error);
            if (!append) {
                chaptersContainer.innerHTML = '<div class="text-center py-8 text-red-400">خطا در بارگذاری قسمت‌ها.</div>';
            }
        } finally {
            isLoading = false;
            chaptersLoading.classList.add('hidden');
            loadMoreBtn.disabled = false;
            loadMoreBtn.textContent = 'بارگذاری بیشتر';
        }
    }

    // Event listeners
    sortSelect.addEventListener('change', () => {
        currentPage = 1;
        hasMoreChapters = true;
        loadChapters(1, false);
    });

    loadMoreBtn.addEventListener('click', () => {
        if (hasMoreChapters && !isLoading) {
            currentPage++;
            loadChapters(currentPage, true);
        }
    });

    // Initial load
    loadChapters(1, false);
});
</script>